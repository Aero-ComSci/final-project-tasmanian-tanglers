from tkinter import *

root = Tk()
root.title("Summertip")
root.geometry('250x350')
lbl = Label(root, text="What activity would you like?")
lbl.grid(column=2, row=0)
select = StringVar()
select.set("Remove")
drop = OptionMenu(root, select, *[""], command=lambda choice: clear(choice))
drop.grid(column=2, row=7)
color=[]
activities = []
#scrollbar was made with ai explanation
#start
canvas = Canvas(root, width=200, height=200)
canvas.grid(column=2, row=3, sticky="nsew")

scrollbar = Scrollbar(root, orient="vertical", command=canvas.yview)
scrollbar.grid(column=3, row=3, sticky="ns")
canvas.configure(yscrollcommand=scrollbar.set)

frame = Frame(canvas)
canvas.create_window((0, 0), window=frame, anchor="nw")
frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
#end

def convert():
    for widget in frame.winfo_children():
        widget.destroy() 
    
    for i, item in enumerate(activities):
        if item:
            button = Button(frame, text=item, bg="red" if color[i] == "r" else "green", width=20, command=lambda k=item, g=i: switch(k,g))
            button.grid(row=i, column=0, pady=5)
            
    
def switch(name,row):
    global color
    for widget in frame.winfo_children():
        if isinstance(widget, Button):  
            if widget.cget("text") == name:
                if widget.grid_info().get("row")==row:
                    color[row] = "g" if widget.cget("bg") == "red" else "r"
                    widget.configure(bg="green" if widget.cget("bg") == "red" else "red") 

def clear(choice,row):
    global color
    global activities
    try:
        activities.remove(choice)
        color.pop(row)
    except ValueError:
        lbl.configure(fg="red")

    convert()
    dlear()
def dlear():
    drop["menu"].delete(0, "end")
    options = [item for item in activities if item]
    select.set("Remove")
    
    for i,name in enumerate(options):
        drop["menu"].add_command(label=name, command=lambda n=name, z=i: clear(n,z))
        
    drop.grid(column=2, row=7) if options else drop.grid_forget()
def reset():
    lbl.configure(text="Add any activities you want", fg="black")

    global entry
    entry = Entry(root, width=30)
    entry.grid(column=2, row=1)

    Button(root, text="Input", command=s7).grid(column=2, row=2)

    dlear()
    convert()
def s7():
    global color
    global entry
    global activities
    if entry.get():
        activities.append(entry.get())
        color.append("r")
        reset()

reset()
root.mainloop()
